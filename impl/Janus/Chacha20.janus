// see https://cr.yp.to/chacha/chacha-20080128.pdf
    
procedure rotate_left_u32(u32 x, int r)
    local int rm = r % 32
    local int rmc = 32 - rm
    local u32 y = ( x << rm) | (x >> rmc)
    x <=> y
    delocal u32 y = ( x >> rm) | (x << rmc)
    delocal int rmc = 32 - rm
    delocal int rm = r % 32

// This and the following procedure differ from Salsa
procedure quarterround(u32 seq0, u32 seq1, u32 seq2, u32 seq3)
	//a += b; d ^= a; d <<<= 16;
	seq0 += seq1
	seq3 ^= seq0
	call rotate_left_u32(seq3, 16)
	//c += d; b ^= c; b <<<= 12;
	seq2 += seq3
	seq1 ^= seq2
	call rotate_left_u32(seq1, 12)
	//a += b; d ^= a; d <<<= 8;
	seq0 += seq1
	seq3 ^= seq0
	call rotate_left_u32(seq3, 8)
	//c += d; b ^= c; b <<<= 7;
	seq2 += seq3
	seq1 ^= seq2
	call rotate_left_u32(seq1, 7)

procedure doubleround(u32 seq[16])
	// first column
	call quarterround(seq[0], seq[4], seq[8], seq[12])
	// second column
	call quarterround(seq[1], seq[5], seq[9], seq[13])
	// third column
	call quarterround(seq[2], seq[6], seq[10], seq[14])
	// fourth column
	call quarterround(seq[3], seq[7], seq[11], seq[15])
	// first diagonal
	call quarterround(seq[0], seq[5], seq[10], seq[15])
	// second diagonal
	call quarterround(seq[1], seq[6], seq[11], seq[12])
	// third diagonal
	call quarterround(seq[2], seq[7], seq[8], seq[13])
	// fourth diagonal
	call quarterround(seq[3], seq[4], seq[9], seq[14])


// I don't know if this can be done without Bennett
procedure Chacha20(u32 in[16], u32 out[16])
	iterate int i = 0 by 1 to 15
		out[i] += in[i]
	end
	iterate int i = 0 by 1 to 9
		call doubleround(out)
	end
	iterate int i = 0 by 1 to 15
		out[i] += in[i]
	end

procedure Chacha20_setup_seq(u32 k0[4], u32 k1[4], u32 n[4], u32 filler[4], u32 seq[16])
	seq[0] += filler[0]
	iterate int i = 0 by 1 to 3
		seq[i+1] += k0[i]
	end
	seq[5] += filler[1]
	iterate int i = 0 by 1 to 3
		seq[i+6] += n[i]
	end
	seq[10] += filler[2]
	iterate int i = 0 by 1 to 3
		seq[i+11] += k1[i]
	end
	seq[15] += filler[3]

procedure Chacha20_k32(u32 k0[4], u32 k1[4], u32 n[4], u32 out[16])
	local u32 sigma[4] = {1634760805, 857760878, 2036477234, 1797285236}
	local u32 seq[16]
	call Chacha20_setup_seq(k0, k1, n, sigma, seq)
	call Chacha20(seq, out)
	uncall Chacha20_setup_seq(k0, k1, n, sigma, seq)
	delocal u32 seq[16]
	delocal u32 sigma[4] = {1634760805, 857760878, 2036477234, 1797285236}

procedure Chacha20_k16(u32 k0[4], u32 n[4], u32 out[16])
	local u32 tau[4] = {1634760805, 824206446, 2036477238, 1797285236}
	local u32 seq[16]
	call Chacha20_setup_seq(k0, k0, n, tau, seq)
	call Chacha20(seq, out)
	uncall Chacha20_setup_seq(k0, k0, n, tau, seq)
	delocal u32 seq[16]
	delocal u32 tau[4] = {1634760805, 824206446, 2036477238, 1797285236}

// So, the two procedures above are the minimum for Chacha20 encryption. 
// The paper splits 'n' into a 64-bit nonce and a 64-bit byte sequence 
// number (a byte ID from 0 to 2^64-1). Maximum message length is 2^70, 
// possibly due to some crypto-related reason.

procedure Chacha20_encrypt(u32 str[], u32 stream[])
	local int len = 16
	iterate int i = 0 by 1 to len - 1
		str[i] ^= stream[i]
	end
	delocal int len = 16

procedure main()
	u32 tau[4] = {1634760805, 824206446, 2036477238, 1797285236}
	u32 seq[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
	u32 k0[4] = {67305985, 134678021, 202050057, 269422093}
	u32 k1[4] = {3435907785, 3503279821, 3570651857, 3638023893}
	u32 n[4] = {1751606885, 1818978921, 1886350957, 1953722993}
	u32 out_s[16]

	print("======================================")
	print("Chacha20 stream buffer before initialization:")
	show(out_s)
	call Chacha20_k16(k0, n, out_s)
	print("Chacha20 stream buffer after initialization:")
	show(out_s)
	
	print("String to encrypt:")
	show(seq)
	call Chacha20_encrypt(seq, out_s)
	print("String encrypted:")
	show(seq)
	call Chacha20_encrypt(seq, out_s) //since it's doing a XOR, it can be both `call` or `uncall`
	print("String decrypted:")
	show(seq)
	
	uncall Chacha20_k16(k0, n, out_s)
	print("Chacha20 stream buffer after de-initialization:")
	show(out_s)

	print("======================================")
