// see https://cr.yp.to/chacha/chacha-20080128.pdf

//procedure rotate_left(u32 x, u32 r)
    //local u32 rm = r % 32
    //local u32 temp_hi = x & (((2**rm)-1)*(2**(32-rm)))
    //local u32 temp_lo = x & ((2**(32-rm))-1)
    //x -= (temp_hi | temp_lo)
    //x += ((temp_hi / (2**(32-rm))) | (temp_lo * (2 ** rm)))
    //delocal u32 temp_lo = (x & (((2**(32-rm))-1)*(2**rm))) / (2**rm)
    //delocal u32 temp_hi = (x & ((2**rm)-1)) * (2 ** (32-rm))
    //delocal u32 rm = r % 32
    
procedure rotate_left_u32(u32 x, int r)
    local int rm = r % 32
    local int rmc = 32 - rm
    local u32 y = ( x << rm) | (x >> rmc)
    x <=> y
    delocal u32 y = ( x >> rm) | (x << rmc)
    delocal int rmc = 32 - rm
    delocal int rm = r % 32

// This and the following procedure differ from Salsa
procedure quarterround(u32 seq[4])
	local u32 tmp = 0
	seq[0] += seq[1]
	seq[3] ^= seq[0]
	tmp <=> seq[3]
	call rotate_left_u32(tmp, 16)
	tmp <=> seq[3]
	//call rotate_left_u32(seq[3], 16)
	seq[2] += seq[3]
	seq[1] ^= seq[2]
	tmp <=> seq[1]
	call rotate_left_u32(tmp, 12)
	tmp <=> seq[1]
	//call rotate_left_u32(seq[1], 12)
	seq[0] += seq[1]
	seq[3] ^= seq[0]
	tmp <=> seq[3]
	call rotate_left_u32(tmp, 8)
	tmp <=> seq[3]
	//call rotate_left_u32(seq[3], 8)
	seq[2] += seq[3]
	seq[1] ^= seq[2]
	tmp <=> seq[1]
	call rotate_left_u32(tmp, 7)
	tmp <=> seq[1]
	//call rotate_left_u32(seq[1], 7)
	delocal u32 tmp = 0

procedure doubleround(u32 seq[16])
	// would be nice if we could get rid of the temporary array, somehow
	local u32 tmp_seq[4]
	// first column
	tmp_seq[0] <=> seq[0]
	tmp_seq[1] <=> seq[4]
	tmp_seq[2] <=> seq[8]
	tmp_seq[3] <=> seq[12]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[0]
	tmp_seq[1] <=> seq[4]
	tmp_seq[2] <=> seq[8]
	tmp_seq[3] <=> seq[12]
	// second column
	tmp_seq[0] <=> seq[1]
	tmp_seq[1] <=> seq[5]
	tmp_seq[2] <=> seq[9]
	tmp_seq[3] <=> seq[13]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[1]
	tmp_seq[1] <=> seq[5]
	tmp_seq[2] <=> seq[9]
	tmp_seq[3] <=> seq[13]
	// third column
	tmp_seq[0] <=> seq[2]
	tmp_seq[1] <=> seq[6]
	tmp_seq[2] <=> seq[10]
	tmp_seq[3] <=> seq[14]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[2]
	tmp_seq[1] <=> seq[6]
	tmp_seq[2] <=> seq[10]
	tmp_seq[3] <=> seq[14]
	// fourth column
	tmp_seq[0] <=> seq[3]
	tmp_seq[1] <=> seq[7]
	tmp_seq[2] <=> seq[11]
	tmp_seq[3] <=> seq[15]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[3]
	tmp_seq[1] <=> seq[7]
	tmp_seq[2] <=> seq[11]
	tmp_seq[3] <=> seq[15]
	// first diagonal
	tmp_seq[0] <=> seq[0]
	tmp_seq[1] <=> seq[5]
	tmp_seq[2] <=> seq[10]
	tmp_seq[3] <=> seq[15]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[0]
	tmp_seq[1] <=> seq[5]
	tmp_seq[2] <=> seq[10]
	tmp_seq[3] <=> seq[15]
	// second diagonal
	tmp_seq[0] <=> seq[1]
	tmp_seq[1] <=> seq[6]
	tmp_seq[2] <=> seq[11]
	tmp_seq[3] <=> seq[12]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[1]
	tmp_seq[1] <=> seq[6]
	tmp_seq[2] <=> seq[11]
	tmp_seq[3] <=> seq[12]
	// third diagonal
	tmp_seq[0] <=> seq[2]
	tmp_seq[1] <=> seq[7]
	tmp_seq[2] <=> seq[8]
	tmp_seq[3] <=> seq[13]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[2]
	tmp_seq[1] <=> seq[7]
	tmp_seq[2] <=> seq[8]
	tmp_seq[3] <=> seq[13]
	// fourth diagonal
	tmp_seq[0] <=> seq[3]
	tmp_seq[1] <=> seq[4]
	tmp_seq[2] <=> seq[9]
	tmp_seq[3] <=> seq[14]
	call quarterround(tmp_seq)
	tmp_seq[0] <=> seq[3]
	tmp_seq[1] <=> seq[4]
	tmp_seq[2] <=> seq[9]
	tmp_seq[3] <=> seq[14]
	delocal u32 tmp_seq[4]


// I don't know if this can be done without Bennett
procedure Chacha20(u32 in[16], u32 out[16])
	iterate int i = 0 by 1 to 15
		out[i] += in[i]
	end
	iterate int i = 0 by 1 to 9
		call doubleround(out)
	end
	iterate int i = 0 by 1 to 15
		out[i] += in[i]
	end

procedure Chacha20_setup_seq(u32 k0[4], u32 k1[4], u32 n[4], u32 filler[4], u32 seq[16])
	seq[0] += filler[0]
	iterate int i = 0 by 1 to 3
		seq[i+1] += k0[i]
	end
	seq[5] += filler[1]
	iterate int i = 0 by 1 to 3
		seq[i+6] += n[i]
	end
	seq[10] += filler[2]
	iterate int i = 0 by 1 to 3
		seq[i+11] += k1[i]
	end
	seq[15] += filler[3]

procedure Chacha20_k32(u32 k0[4], u32 k1[4], u32 n[4], u32 out[16])
	local u32 sigma[4] = {1634760805, 857760878, 2036477234, 1797285236}
	local u32 seq[16]
	call Chacha20_setup_seq(k0, k1, n, sigma, seq)
	call Chacha20(seq, out)
	uncall Chacha20_setup_seq(k0, k1, n, sigma, seq)
	delocal u32 seq[16]
	delocal u32 sigma[4] = {1634760805, 857760878, 2036477234, 1797285236}

procedure Chacha20_k16(u32 k0[4], u32 n[4], u32 out[16])
	local u32 tau[4] = {1634760805, 824206446, 2036477238, 1797285236}
	local u32 seq[16]
	call Chacha20_setup_seq(k0, k0, n, tau, seq)
	call Chacha20(seq, out)
	uncall Chacha20_setup_seq(k0, k0, n, tau, seq)
	delocal u32 seq[16]
	delocal u32 tau[4] = {1634760805, 824206446, 2036477238, 1797285236}

// So, the two procedures above are the minimum for Chacha20 encryption. 
// The paper splits 'n' into a 64-bit nonce and a 64-bit byte sequence 
// number (a byte ID from 0 to 2^64-1). Maximum message length is 2^70, 
// possibly due to some crypto-related reason.

procedure Chacha20_encrypt(u32 str[], u32 stream[])
	local int len = size(str)
	iterate int i = 0 by 1 to len - 1
		str[i] ^= stream[i]
	end
	delocal int len = size(str)

procedure main()
	u32 tau[4] = {1634760805, 824206446, 2036477238, 1797285236}
	u32 seq[] = ARGV1#
	//u32 tmp_seq[4]
	//show(seq)
	////call quarterround(seq)
	////call quarterround_bt(seq, tmp_seq)
	u32 k0[4] = {67305985, 134678021, 202050057, 269422093}
	u32 k1[4] = {-859059511, -791687475, -724315439, -656943403}
	u32 n[4] = {1751606885, 1818978921, 1886350957, 1953722993}
	u32 test_seq[16]
	u32 out_s[16]
	
	print("Chacha20 stream buffer before initialization:")
	show(out_s)
	call Chacha20_k16(k0, n, out_s)
	print("Chacha20 stream buffer after initialization:")
	show(out_s)
	
	print("String to encrypt:")
	show(seq)
	call Chacha20_encrypt(seq, out_s)
	print("String encrypted:")
	show(seq)
	call Chacha20_encrypt(seq, out_s)
	print("String decrypted:")
	show(seq)
	
	uncall Chacha20_k16(k0, n, out_s)
	print("Chacha20 stream buffer after de-initialization:")
	show(out_s)
	
	call Chacha20_setup_seq(k0, k0, n, tau, test_seq)
